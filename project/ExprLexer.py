# Generated from c:/Users/kphan/OneDrive/Plocha/School - all/PJP - 3rd/project/Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,4,7,106,8,7,11,7,12,7,
        107,1,7,1,7,1,8,1,8,1,8,1,8,5,8,116,8,8,10,8,12,8,119,9,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,130,8,9,10,9,12,9,133,9,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,5,35,224,8,35,
        10,35,12,35,227,9,35,3,35,229,8,35,1,36,4,36,232,8,36,11,36,12,36,
        233,1,37,4,37,237,8,37,11,37,12,37,238,1,37,1,37,4,37,243,8,37,11,
        37,12,37,244,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,256,
        8,38,1,39,1,39,1,39,5,39,261,8,39,10,39,12,39,264,9,39,1,39,1,39,
        1,40,1,40,1,40,1,40,3,40,272,8,40,1,40,3,40,275,8,40,1,40,3,40,278,
        8,40,1,117,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,0,1,0,9,3,0,9,10,
        13,13,32,32,2,0,10,10,13,13,2,0,65,90,97,122,3,0,48,57,65,90,97,
        122,1,0,48,57,4,0,10,10,13,13,34,34,92,92,8,0,34,34,39,39,92,92,
        98,98,102,102,110,110,114,114,116,116,1,0,48,51,1,0,48,55,291,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,83,1,
        0,0,0,3,85,1,0,0,0,5,87,1,0,0,0,7,89,1,0,0,0,9,91,1,0,0,0,11,96,
        1,0,0,0,13,102,1,0,0,0,15,105,1,0,0,0,17,111,1,0,0,0,19,125,1,0,
        0,0,21,136,1,0,0,0,23,141,1,0,0,0,25,147,1,0,0,0,27,151,1,0,0,0,
        29,158,1,0,0,0,31,163,1,0,0,0,33,169,1,0,0,0,35,172,1,0,0,0,37,178,
        1,0,0,0,39,183,1,0,0,0,41,187,1,0,0,0,43,189,1,0,0,0,45,191,1,0,
        0,0,47,193,1,0,0,0,49,195,1,0,0,0,51,197,1,0,0,0,53,199,1,0,0,0,
        55,201,1,0,0,0,57,203,1,0,0,0,59,205,1,0,0,0,61,207,1,0,0,0,63,209,
        1,0,0,0,65,212,1,0,0,0,67,215,1,0,0,0,69,218,1,0,0,0,71,221,1,0,
        0,0,73,231,1,0,0,0,75,236,1,0,0,0,77,255,1,0,0,0,79,257,1,0,0,0,
        81,277,1,0,0,0,83,84,5,123,0,0,84,2,1,0,0,0,85,86,5,125,0,0,86,4,
        1,0,0,0,87,88,5,40,0,0,88,6,1,0,0,0,89,90,5,41,0,0,90,8,1,0,0,0,
        91,92,5,116,0,0,92,93,5,114,0,0,93,94,5,117,0,0,94,95,5,101,0,0,
        95,10,1,0,0,0,96,97,5,102,0,0,97,98,5,97,0,0,98,99,5,108,0,0,99,
        100,5,115,0,0,100,101,5,101,0,0,101,12,1,0,0,0,102,103,5,61,0,0,
        103,14,1,0,0,0,104,106,7,0,0,0,105,104,1,0,0,0,106,107,1,0,0,0,107,
        105,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,6,7,0,0,110,
        16,1,0,0,0,111,112,5,47,0,0,112,113,5,42,0,0,113,117,1,0,0,0,114,
        116,9,0,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,118,1,0,0,0,117,
        115,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,5,42,0,0,121,
        122,5,47,0,0,122,123,1,0,0,0,123,124,6,8,0,0,124,18,1,0,0,0,125,
        126,5,47,0,0,126,127,5,47,0,0,127,131,1,0,0,0,128,130,8,1,0,0,129,
        128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
        134,1,0,0,0,133,131,1,0,0,0,134,135,6,9,0,0,135,20,1,0,0,0,136,137,
        5,98,0,0,137,138,5,111,0,0,138,139,5,111,0,0,139,140,5,108,0,0,140,
        22,1,0,0,0,141,142,5,102,0,0,142,143,5,108,0,0,143,144,5,111,0,0,
        144,145,5,97,0,0,145,146,5,116,0,0,146,24,1,0,0,0,147,148,5,105,
        0,0,148,149,5,110,0,0,149,150,5,116,0,0,150,26,1,0,0,0,151,152,5,
        115,0,0,152,153,5,116,0,0,153,154,5,114,0,0,154,155,5,105,0,0,155,
        156,5,110,0,0,156,157,5,103,0,0,157,28,1,0,0,0,158,159,5,114,0,0,
        159,160,5,101,0,0,160,161,5,97,0,0,161,162,5,100,0,0,162,30,1,0,
        0,0,163,164,5,119,0,0,164,165,5,114,0,0,165,166,5,105,0,0,166,167,
        5,116,0,0,167,168,5,101,0,0,168,32,1,0,0,0,169,170,5,105,0,0,170,
        171,5,102,0,0,171,34,1,0,0,0,172,173,5,119,0,0,173,174,5,104,0,0,
        174,175,5,105,0,0,175,176,5,108,0,0,176,177,5,101,0,0,177,36,1,0,
        0,0,178,179,5,101,0,0,179,180,5,108,0,0,180,181,5,115,0,0,181,182,
        5,101,0,0,182,38,1,0,0,0,183,184,5,102,0,0,184,185,5,111,0,0,185,
        186,5,114,0,0,186,40,1,0,0,0,187,188,5,59,0,0,188,42,1,0,0,0,189,
        190,5,44,0,0,190,44,1,0,0,0,191,192,5,46,0,0,192,46,1,0,0,0,193,
        194,5,42,0,0,194,48,1,0,0,0,195,196,5,47,0,0,196,50,1,0,0,0,197,
        198,5,37,0,0,198,52,1,0,0,0,199,200,5,43,0,0,200,54,1,0,0,0,201,
        202,5,45,0,0,202,56,1,0,0,0,203,204,5,60,0,0,204,58,1,0,0,0,205,
        206,5,62,0,0,206,60,1,0,0,0,207,208,5,33,0,0,208,62,1,0,0,0,209,
        210,5,61,0,0,210,211,5,61,0,0,211,64,1,0,0,0,212,213,5,33,0,0,213,
        214,5,61,0,0,214,66,1,0,0,0,215,216,5,38,0,0,216,217,5,38,0,0,217,
        68,1,0,0,0,218,219,5,124,0,0,219,220,5,124,0,0,220,70,1,0,0,0,221,
        228,7,2,0,0,222,224,7,3,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,
        223,1,0,0,0,225,226,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,228,
        225,1,0,0,0,228,229,1,0,0,0,229,72,1,0,0,0,230,232,7,4,0,0,231,230,
        1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,74,1,
        0,0,0,235,237,7,4,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,
        0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,242,3,45,22,0,241,243,
        7,4,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,
        1,0,0,0,245,76,1,0,0,0,246,247,5,116,0,0,247,248,5,114,0,0,248,249,
        5,117,0,0,249,256,5,101,0,0,250,251,5,102,0,0,251,252,5,97,0,0,252,
        253,5,108,0,0,253,254,5,115,0,0,254,256,5,101,0,0,255,246,1,0,0,
        0,255,250,1,0,0,0,256,78,1,0,0,0,257,262,5,34,0,0,258,261,8,5,0,
        0,259,261,3,81,40,0,260,258,1,0,0,0,260,259,1,0,0,0,261,264,1,0,
        0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,262,1,0,
        0,0,265,266,5,34,0,0,266,80,1,0,0,0,267,268,5,92,0,0,268,278,7,6,
        0,0,269,274,5,92,0,0,270,272,7,7,0,0,271,270,1,0,0,0,271,272,1,0,
        0,0,272,273,1,0,0,0,273,275,7,8,0,0,274,271,1,0,0,0,274,275,1,0,
        0,0,275,276,1,0,0,0,276,278,7,8,0,0,277,267,1,0,0,0,277,269,1,0,
        0,0,278,82,1,0,0,0,15,0,107,117,131,225,228,233,238,244,255,260,
        262,271,274,277,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    WS = 8
    COMMENT = 9
    LINE_COMMENT = 10
    BOOLEAN = 11
    FLOAT = 12
    INT = 13
    STRING = 14
    READ = 15
    WRITE = 16
    IF = 17
    WHILE = 18
    ELSE = 19
    FOR = 20
    SEMI = 21
    COMMA = 22
    CON = 23
    MUL = 24
    DIV = 25
    MOD = 26
    ADD = 27
    SUB = 28
    LES = 29
    GRE = 30
    NEG = 31
    EQ = 32
    NEQ = 33
    AND = 34
    OR = 35
    IDENTIFIER = 36
    DECIMAL_LITERAL = 37
    FLOAT_LITERAL = 38
    BOOL_LITERAL = 39
    STRING_LITERAL = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'('", "')'", "'true'", "'false'", "'='", "'bool'", 
            "'float'", "'int'", "'string'", "'read'", "'write'", "'if'", 
            "'while'", "'else'", "'for'", "';'", "','", "'.'", "'*'", "'/'", 
            "'%'", "'+'", "'-'", "'<'", "'>'", "'!'", "'=='", "'!='", "'&&'", 
            "'||'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "LINE_COMMENT", "BOOLEAN", "FLOAT", "INT", 
            "STRING", "READ", "WRITE", "IF", "WHILE", "ELSE", "FOR", "SEMI", 
            "COMMA", "CON", "MUL", "DIV", "MOD", "ADD", "SUB", "LES", "GRE", 
            "NEG", "EQ", "NEQ", "AND", "OR", "IDENTIFIER", "DECIMAL_LITERAL", 
            "FLOAT_LITERAL", "BOOL_LITERAL", "STRING_LITERAL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "WS", "COMMENT", "LINE_COMMENT", "BOOLEAN", "FLOAT", "INT", 
                  "STRING", "READ", "WRITE", "IF", "WHILE", "ELSE", "FOR", 
                  "SEMI", "COMMA", "CON", "MUL", "DIV", "MOD", "ADD", "SUB", 
                  "LES", "GRE", "NEG", "EQ", "NEQ", "AND", "OR", "IDENTIFIER", 
                  "DECIMAL_LITERAL", "FLOAT_LITERAL", "BOOL_LITERAL", "STRING_LITERAL", 
                  "EscapeSequence" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


